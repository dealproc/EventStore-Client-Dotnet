(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{357:function(t,e,a){"use strict";a.r(e);var n=a(42),s=Object(n.a)({},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"quick-tour"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#quick-tour","aria-hidden":"true"}},[t._v("#")]),t._v(" Quick tour")]),t._v(" "),a("p",[t._v("This is a quick tour into the basic operations with Event Store. We will look at creating a connection, writing an event and reading an event.")]),t._v(" "),a("h2",{attrs:{id:"requirements"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#requirements","aria-hidden":"true"}},[t._v("#")]),t._v(" Requirements")]),t._v(" "),a("p",[t._v("This examples has the following requirements:")]),t._v(" "),a("ul",[a("li",[t._v("At least "),a("a",{attrs:{href:"https://dotnet.microsoft.com/download",target:"_blank",rel:"noopener noreferrer"}},[t._v(".NET Core SDK 3.1"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.docker.com/get-started",target:"_blank",rel:"noopener noreferrer"}},[t._v("Docker"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("A reference to the "),a("a",{attrs:{href:"https://www.nuget.org/packages/EventStore.Client.Grpc/",target:"_blank",rel:"noopener noreferrer"}},[t._v("EventStore.Client.Grpc"),a("OutboundLink")],1),t._v(" nuget package")])]),t._v(" "),a("h2",{attrs:{id:"setup-the-certificates-and-running-the-server"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setup-the-certificates-and-running-the-server","aria-hidden":"true"}},[t._v("#")]),t._v(" Setup the certificates and running the server")]),t._v(" "),a("p",[t._v("To run the Event Store server, you first need to set up a trusted certificate. This can be done using the "),a("code",[t._v("dotnet dev-certs")]),t._v(" tool.")]),t._v(" "),a("p",[t._v("Navigate to an empty folder and run the following command.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("dotnet dev-certs https -ep certs/localhost.pfx -p dev --trust\n")])])]),a("p",[t._v("Then create a new file called "),a("code",[t._v("docker-compose.yml")]),t._v(" and copy the following contents into it.")]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'3'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("services")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("eventstore")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" eventstore/eventstore"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("6.0.0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("preview3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("bionic\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("volumes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" ./certs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("/usr/certs\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("environment")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" EVENTSTORE_CERTIFICATE_FILE=/usr/certs/localhost.pfx\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" EVENTSTORE_CERTIFICATE_PASSWORD=dev\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" 2113"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2113")]),t._v("\n")])])]),a("p",[t._v("Finally run the command.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("docker-compose up\n")])])]),a("p",[t._v("This will launch a new instance of the Event Store server with a trusted certificate.")]),t._v(" "),a("h2",{attrs:{id:"creating-an-connection"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#creating-an-connection","aria-hidden":"true"}},[t._v("#")]),t._v(" Creating an connection")]),t._v(" "),a("p",[t._v("Create a new console application.")]),t._v(" "),a("p",[t._v("The following example shows the simplest way to create a connection to event store on your local machine.")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('var settings = new EventStoreClientSettings {\n\tConnectivitySettings = {\n\t\tAddress = new Uri("https://localhost:2113")\n\t}\n};\n\nvar connection = new EventStoreClient(settings);\n')])])]),a("blockquote",[a("p",[t._v("By default the server listens to port 2113 for requests.")])]),t._v(" "),a("h2",{attrs:{id:"writing-an-event"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#writing-an-event","aria-hidden":"true"}},[t._v("#")]),t._v(" Writing an event")]),t._v(" "),a("p",[t._v("Writing an event to the database involves two stages.")]),t._v(" "),a("p",[t._v("Firstly you have to construct a new "),a("code",[t._v("EventData")]),t._v(" that contains a unique Id, an event type and a byte array containing the event data. Usually this is represented by json but can take any format.")]),t._v(" "),a("p",[t._v("Secondly you have to append that "),a("code",[t._v("EventData")]),t._v(" to a stream. Making sure to specify the stream name, the expected state of the stream and then the data.")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('var eventData = new EventData(\n\tUuid.NewUuid(),\n\t"some-event",\n\tEncoding.UTF8.GetBytes("{\\"id\\": \\"1\\" \\"value\\": \\"some value\\"}")\n);\n\nawait connection.AppendToStreamAsync(\n\t"some-stream",\n\tStreamState.NoStream,\n\tnew List<EventData> {\n\t\teventData\n\t});\n')])])]),a("h2",{attrs:{id:"reading-an-event"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reading-an-event","aria-hidden":"true"}},[t._v("#")]),t._v(" Reading an event")]),t._v(" "),a("p",[t._v('A Stream can read in both directions. In this case we are reading the "some-stream" forwards from the start. We are reading a single event.')]),t._v(" "),a("p",[t._v("This provides an "),a("code",[t._v("IAsyncEnumerable")]),t._v(" that can then be iterated on.")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('var events = connection.ReadStreamAsync(\n\tDirection.Forwards,\n\t"some-stream",\n\tStreamPosition.Start,\n\t1);\n\nawait foreach (var @event in events) {\n\tConsole.WriteLine(Encoding.UTF8.GetString(@event.Event.Data.Span));\n}\n\n')])])])])},[],!1,null,null,null);e.default=s.exports}}]);