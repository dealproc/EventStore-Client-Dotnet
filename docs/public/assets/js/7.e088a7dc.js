(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{351:function(t,e,n){"use strict";n.r(e);var s=n(42),a=Object(s.a)({},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"basics-of-connecting-to-event-store"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#basics-of-connecting-to-event-store","aria-hidden":"true"}},[t._v("#")]),t._v(" Basics of connecting to Event Store")]),t._v(" "),n("p",[t._v("The simplest way to connect to Event Store is to only use a single node and leave the rest of the options as default.")]),t._v(" "),n("div",{staticClass:"language-cs extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('var settings = new EventStoreClientSettings {\n\tConnectivitySettings = {\n\t\tAddress = new Uri("https://localhost:2113")\n\t}\n};\n\nvar connection = new EventStoreClient(settings);\n')])])]),n("h2",{attrs:{id:"setting-the-connection-name"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#setting-the-connection-name","aria-hidden":"true"}},[t._v("#")]),t._v(" Setting the connection name")]),t._v(" "),n("p",[t._v("If you have multiple clients connecting to Event Store it is advisable to set the connection name so that it can be easily identified via the UI. This is done via a property on the "),n("code",[t._v("EventStoreClientSettings")])]),t._v(" "),n("div",{staticClass:"language-cs extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('var settings = new EventStoreClientSettings {\n\tConnectionName = "Some Connection",\n\tConnectivitySettings = {\n\t\tAddress = new Uri("https://localhost:2113")\n\t}\n};\n')])])]),n("p",[t._v("And they can be found on the home page of the admin UI")]),t._v(" "),n("blockquote",[n("p",[t._v("TODO: Figure out what is going on with gRPC connections")])]),t._v(" "),n("h2",{attrs:{id:"overriding-the-request-timeout"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#overriding-the-request-timeout","aria-hidden":"true"}},[t._v("#")]),t._v(" Overriding the request timeout")]),t._v(" "),n("p",[t._v("The default timeout for a single request is "),n("strong",[t._v("5 seconds")]),t._v(" but this can be modified on the connectivity settings.")]),t._v(" "),n("div",{staticClass:"language-cs extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('var settings = new EventStoreClientSettings {\n\tOperationOptions = new EventStoreClientOperationOptions {\n\t\tTimeoutAfter = TimeSpan.FromSeconds(30)\n\t},\n\tConnectivitySettings = {\n\t\tAddress = new Uri("https://localhost:2113")\n\t}\n};\n')])])]),n("blockquote",[n("p",[t._v("Subscriptions are not bound by the timeout as they are long lived")])]),t._v(" "),n("h2",{attrs:{id:"adding-a-grpc-interceptor"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#adding-a-grpc-interceptor","aria-hidden":"true"}},[t._v("#")]),t._v(" Adding a gRPC interceptor")]),t._v(" "),n("p",[t._v("gRPC clients allow you to create "),n("a",{attrs:{href:"https://grpc.github.io/grpc/csharp/api/Grpc.Core.Interceptors.Interceptor.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Interceptors"),n("OutboundLink")],1),t._v(" that allow you to intercept the gRPC requests.")]),t._v(" "),n("p",[t._v("The Event Store client allows you to add one of these to the connection that can be used for things such as logging all requests made.")]),t._v(" "),n("p",[t._v("To create one create a new class that inherits from "),n("code",[t._v("Interceptor")]),t._v(" and override the methods that you want to intercept.")]),t._v(" "),n("div",{staticClass:"language-cs extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('public class DemoInterceptor : Interceptor {\n\tpublic override AsyncServerStreamingCall<TResponse>\n\t\tAsyncServerStreamingCall<TRequest, TResponse>(\n\t\t\tTRequest request,\n\t\t\tClientInterceptorContext<TRequest, TResponse> context,\n\t\t\tAsyncServerStreamingCallContinuation<TRequest, TResponse> continuation) {\n\t\tConsole.WriteLine($"AsyncServerStreamingCall: {context.Method.FullName}");\n\n\t\treturn base.AsyncServerStreamingCall(request, context, continuation);\n\t}\n\n\tpublic override AsyncClientStreamingCall<TRequest, TResponse>\n\t\tAsyncClientStreamingCall<TRequest, TResponse>(\n\t\t\tClientInterceptorContext<TRequest, TResponse> context,\n\t\t\tAsyncClientStreamingCallContinuation<TRequest, TResponse> continuation) {\n\t\tConsole.WriteLine($"AsyncClientStreamingCall: {context.Method.FullName}");\n\n\t\treturn base.AsyncClientStreamingCall(context, continuation);\n\t}\n}\n\n')])])]),n("p",[t._v("Then add this to the array of interceptors on the "),n("code",[t._v("EventStoreClientSettings")]),t._v(" class.")]),t._v(" "),n("div",{staticClass:"language-cs extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('var settings = new EventStoreClientSettings {\n\tInterceptors = new[] {new DemoInterceptor()},\n\tConnectivitySettings = {\n\t\tAddress = new Uri("https://localhost:2113")\n\t}\n};\nvar settings = new EventStoreClientSettings {\n\tCreateHttpMessageHandler = () =>\n\t\tnew HttpClientHandler {\n\t\t\tServerCertificateCustomValidationCallback = (sender, cert, chain, sslPolicyErrors) => true\n\t\t},\n\tConnectivitySettings = {\n\t\tAddress = new Uri("https://localhost:2113")\n\t}\n};\n')])])]),n("h2",{attrs:{id:"using-a-custom-htt"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#using-a-custom-htt","aria-hidden":"true"}},[t._v("#")]),t._v(" Using a custom Htt")])])},[],!1,null,null,null);e.default=a.exports}}]);